<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="09"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="27" month="February" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+B9PgWE5okg7kVxEbfRV2SySJbNa2xUpq/vW
rZGRmchMWJlANoAUlabl6Ne4ETMR8yzzKP0k863nfAdAUiy7e2ImohXdLiZw
cNbvfPuSJEn06SR+EEVN3iyyk/h6nsUXBfzYxKdNk9VN2uRlEV+XH7Mi3r04
vd6L0tGoyuAj+BFNynGRLuG7SZVOmyTPmmlSpU2dZGmTLFLsIBqnzUlcN5Mo
GpdFnRX1uj6Jm2qdRXVTZenyJL68uP4hylcVPa6bo4ODpwdHUQovT+KrbLyu
YDrRzewkfnt6fRV9vIHu8lmRF7M4NXMcj8oqilb5SRTHTTk+ib/dZPW3/GOS
rZo5PDnG33VZwcDT2reoN8vwwbhcrtJxY1qsR/5ZUeKjajrOJnWzwW3jZvAv
XTfzsjqJkjgvoL8Xw/jFupiMFukkg094r16k6yorxlnwqqxmfrF4DGW1iV+8
OINX2TLNFyfxYrb4fS0NGno/hCnpSM+H8cu0mGzSpRvneV7lk3lamRc0yn9f
pwv4chlfZ+N5US7KWZ7V8WUxHuJCYWsyWOTDx48fxi/LKpuX6zqLz6v8E05z
DIPDPNMiPs+zWYnbkM1g90/is3SRT8uqyFPav3XRVNDy3dUp/FzNywImtPOb
w/jJwyfxo4eH8WM45R2/uCVP8ff/2uTDf5X52eX9OIxff3teFuVsvvY7+WNW
ZctN+Ob+Szx6/DT+Ia0KgJtyPZvHb8t04pZoXtB6Jrih7w6P48cvroIFFnmT
TeJ/AmiclEu/1t8cH8eHRw+P4gePHhw+eepX+udyQpPdutSzYfw+XSzSsV/n
WVotzENa4lsY9Q8wi0l8VU6bG7gtA12gjDSGr35fZZM5tqqlEY2EN7Gp8tG6
YVjlUf6QFR/j7/Pq47xc/EWH+aFK18W8nGZVfHV5DU/1+ndeyKhz6GU4kl5+
X+fNcOpaDgHUdbTreblM6/iHsq7h/upwp9UyfpEvcU99lw01HU656e/TSveL
e3qZz9bZIv4e9geQQVaVtXk1nqfw7i3+t4JNKNxVA4DLFgB2bvvi92X1sTYg
Oa5+gwjt97U2HY5T1/ObFDZw/DF+B1OtbvI/f/Rjps08h5V9X+F8q4nf37Qo
AAqv6zFuRpHP7lz0nFoPG9e6s+436XoRn1XlzSLbRFFRVkvYnU8Z4r+3P5w9
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

-->

</rfc>
